type Trade {
    id: String
    tradeNumber: String
    state: String
    leadStatus: String
    clientInterests: [String]
    link: String
    visitDate: String
    nextVisitDate: String
    paymentType: String
    tradeSource: String
    propertyType: String
    paymentProvider: String
    responsible: User
    flat: TradeFlat
    contact: Contact
    isNewTrade: Boolean
}

type TradeFlat {
    sale: Float
    price: Float
    flatId: String
    flatNumber: Int
    section: String
    level: String
    apartmentComplexId: String
    apartmentComplex: String
    house: String
    houseId: String
}

type Reason {
    value: Int
    label: String
}

input ReasonInput {
    value: Int
    label: String
}

input TradeFlatInput {
    sale: Float
    price: Float
    squarePrice: Float
    squarePriceSale: Float
    flatId: String
    flatNumber: String
    section: String
    level: String
    apartmentComplexId: String
    apartmentComplex: String
    house: String
    houseId: String
}

input TradeInput {
    id: String
    tradeNumber: String
    state: String
    leadStatus: String
    clientInterests: [String]
    link: String
    tradeSource: String
    visitDate: String
    nextVisitDate: String
    paymentType: String
    paymentProvider: String
    propertyType: String
    responsible: String
    flat: TradeFlatInput
    existingContact: String
    newContact: ContactInput
    isNewTrade: Boolean
}

input UserFormInput {
    name: String
    email: String
    phone: String
    developerUuid: String
    reason: ReasonInput
}

type Mutation {
    createTrade(developerUuid: String!, trade: TradeInput!): Trade
    updateTrade(uuid: String!, trade: TradeInput!): Trade
    deleteTrade(uuid: String!): Boolean
    requestFromPublicForm(flat: TradeFlatInput!, userInfo: UserFormInput!): Trade
}

extend type Query {
    getAllTrades(developerUuid: String!): [Trade]
    getTrade(uuid: String!): Trade
    getContactTrades(contactId: String!): [Trade]
}
